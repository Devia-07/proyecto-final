def conditions_searchs(destination,origin,passenger):
    indices=[]
    if c.conditions_search(destination,origin,passenger)==True:
        mb.showinfo("info","datos correctos")
        indices=c.search(destination,origin)
        search_fly(indices)
    else:
        mb.showerror("error","datos incorrectos")


def fly():
    origen=[]
    destino=[]
    fecha=[]
    origen,destino,fecha =c.lista_vuelos(origen,destino,fecha)
    window_fly=ctk.CTk()
    window_fly.title("menu fly")
    window_fly.config(bg="white")
    window_fly.geometry("800x500")
    window_fly.resizable(0,0) # no se puede cambiar el tama√±o de la ventana
    label=ctk.CTkLabel(window_fly,text="Menu")
    label.pack()
    
    # crear una lista de dias de junio
    dates_june = [f"2024-06-{day:02d}" for day in range(1, 31)]
    going = ctk.StringVar()

# creacion de elementos de la pantalla de menu fly

#____________________________________________________________________________________
    label_passenger = ctk.CTkLabel(window_fly,text="numero de pasajeros")
    entry_passenger = ctk.CTkEntry(window_fly)
#____________________________________________________________________________________
    only_going = ctk.CTkRadioButton(window_fly, text="solo ida", variable=going,value = "solo ida")
#____________________________________________________________________________________
    cities_origin = ctk.CTkComboBox(window_fly,values=origen,state="readonly") # steate readonly para que no se pueda escribir
    cities_origin.set("Ciudad de origen")  # coloca un texto por defecto
#____________________________________________________________________________________
    cities_destination = ctk.CTkComboBox(window_fly,values=destino,state="readonly")  # steate readonly para que no se pueda escribir
    cities_destination.set("Ciudad de destino")  # coloca un texto por defecto
#____________________________________________________________________________________
    list_going = ctk.CTkComboBox(window_fly,values = dates_june,state="readonly")  # steate readonly para que no se pueda escribir
    list_going.set("ida")  # coloca un texto por defecto
    
#____________________________________________________________________________________
    button_search = ctk.CTkButton(window_fly,text="buscar",command=lambda:conditions_searchs(cities_destination.get(),cities_origin.get(),entry_passenger.get()),width=9,height=2)
#____________________________________________________________________________________
#____________________________________________________________________________________
    # dar posicion a los elementos de la pantalla de menu fly
    cities_origin.grid(row=8,column=0)
    cities_destination.grid(row=8,column=1)
    list_going.grid(row=8,column=2,padx=10,pady=10)
    only_going.grid(row=0,column=0)
    button_search.grid(row=9,column=0,padx=10,pady=10)
    label_passenger.grid(row=1,column=5,padx=10,pady=10)
    entry_passenger.grid(row=1,column=6,padx=10,pady=10)

    window_fly.mainloop()
#_______________________________________________________________________________________________________________________
#funcion para buscar vuelos disponibles
def search_fly(indices):
    df=pd.read_csv("dato_vuelo.csv")
    window_search=ctk.CTk()
    window_search.title("busqueda de vuelos")
    window_search.config(bg="white")
    window_search.geometry()
    label=ctk.CTkLabel(window_search,text="busqueda de vuelos")
#____________________________________________________________________________________
    #creacion de botones
    botones=[]
    for i in range(len(indices)-1):
        button_see=ctk.CTkButton(window_search,text=f"{df["Fecha"].values[indices[i]]} {df["ValorMedio"].values[indices[i]]}")
        button_see.grid(row=0,column=i,padx=10,pady=10)
        botones.append(button_see)